// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  fullName               String?
  email                  String?        @unique
  emailVerified          DateTime?
  image                  String?
  role                   UserRole       @default(CREATOR)
  accounts               Account[]
  sessions               Session[]
  walletAddress          String?        @unique
  bio                    String?        @db.Text
  skills                 String[]
  birthday               DateTime?
  location              String?
  website               String?
  github                String?
  twitter               String?
  linkedin              String?
  experience            Int?           @default(0)
  education             String?
  languages             String[]       @default([])
  availability          Availability   @default(FULL_TIME)
  hasCompletedOnboarding Boolean       @default(false)
  projects              Project[]      @relation("CreatedProjects")
  collaborations        Project[]      @relation("ProjectCollaborators")
  notifications         Notification[]
  aiUsage              AIUsage[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model Project {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  creator         User          @relation("CreatedProjects", fields: [creatorId], references: [id])
  creatorId       String
  collaborators   User[]        @relation("ProjectCollaborators")
  category        Category      @default(OTHER)
  status          Status        @default(OPEN)
  tags            String[]
  tasks           Task[]
  files           ProjectFile[]
  aiGenerations   AIGeneration[]
  visibility      Visibility    @default(PUBLIC)
  deadline        DateTime?
  budget          Float?
  repository      String?       // GitHub repository URL
  liveUrl         String?       // Live project URL
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  status      TaskStatus  @default(TODO)
  priority    Priority    @default(MEDIUM)
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  dueDate     DateTime?
  order       Int         @default(0)
}

model ProjectFile {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean         @default(false)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  link      String?
  createdAt DateTime        @default(now())
}

model AIUsage {
  id        String    @id @default(cuid())
  type      AIToolType
  prompt    String    @db.Text
  response  String    @db.Text
  tokens    Int
  provider  String    // openai or anthropic
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
}

model AIGeneration {
  id        String   @id @default(cuid())
  type      String   // code, content, etc.
  input     String   @db.Text
  output    String   @db.Text
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
}

enum UserRole {
  DEVELOPER
  DESIGNER
  CREATOR
  WRITER
  ADMIN
}

enum Category {
  DEVELOPMENT
  DESIGN
  CONTENT
  MARKETING
  OTHER
}

enum Status {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Availability {
  FULL_TIME
  PART_TIME
  CONTRACT
  NOT_AVAILABLE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  PROJECT_INVITATION
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATE
  MENTION
  SYSTEM
}

enum AIToolType {
  CODE_GENERATION
  CODE_REVIEW
  DEBUG_ASSIST
  GIT_ASSIST
  CONTENT_GENERATION
  VIDEO_GENERATION
  ENHANCEMENT
}

enum Visibility {
  PUBLIC
  PRIVATE
  TEAM
}
